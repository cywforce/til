// Code generated by Wire. DO NOT EDIT.

//go:generate wire
//+build !wireinject

package graphqlapi

import (
	"context"
	"github.com/google/wire"
)

// Injectors from wire.go:

func InitializeGraphQLConfig(ctx context.Context) (Config, error) {
	resolverRoot, err := initializeResolvers(ctx)
	if err != nil {
		return Config{}, err
	}
	directiveRoot := _wireDirectiveRootValue
	complexityRoot := _wireComplexityRootValue
	config := Config{
		Resolvers:  resolverRoot,
		Directives: directiveRoot,
		Complexity: complexityRoot,
	}
	return config, nil
}

var (
	_wireDirectiveRootValue  = DirectiveRoot{}
	_wireComplexityRootValue = ComplexityRoot{}
)

func initializeResolvers(ctx context.Context) (ResolverRoot, error) {
	todoServiceClient, err := ProvideTodoServiceClient(ctx)
	if err != nil {
		return nil, err
	}
	graphqlapiTodoServiceHandler := &todoServiceHandler{
		todoService: todoServiceClient,
	}
	echoClient, err := ProvideEchoClient(ctx)
	if err != nil {
		return nil, err
	}
	graphqlapiEchoHandler := &echoHandler{
		echo: echoClient,
	}
	graphqlapiQueryResolver := &queryResolver{
		todoServiceHandler: graphqlapiTodoServiceHandler,
		echoHandler:        graphqlapiEchoHandler,
	}
	graphqlapiMutationResolver := &mutationResolver{
		todoServiceHandler: graphqlapiTodoServiceHandler,
		echoHandler:        graphqlapiEchoHandler,
	}
	graphqlapiResolver := &resolver{
		queryResolver:    graphqlapiQueryResolver,
		mutationResolver: graphqlapiMutationResolver,
	}
	return graphqlapiResolver, nil
}

// wire.go:

var grpcClientSet = wire.NewSet(
	ProvideTodoServiceClient,
	ProvideEchoClient,
)
