// Code generated by metago. DO NOT EDIT.

//+build !metago

package benchmark

import (
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/vvakame/til/go/metago"
)

// TODO 無くても動くように
var _ metago.Value = nil

type FooMetago struct {
	ID        int64
	Kind      string
	Name      string `json:"nickname"`
	Age       int
	CreatedAt time.Time
}

var bufferPool *sync.Pool = &sync.Pool{
	New: func() interface{} {
		return make([]byte, 0, 100)
	},
}
var propertyNameCache map[string]string

func (obj *FooMetago) MarshalJSON() ([]byte, error) {
	buf := bufferPool.Get().([]byte)
	if propertyNameCache == nil {
		propertyNameCache = make(map[string]string)
	}

	buf = append(buf, "{"...)

	var i int
	{

		if i != 0 {
			buf = append(buf, ","...)
		}

		propertyName := "ID"
		if v := ""; v != "" {
			propertyName = strings.SplitN(v, ",", 2)[0]
		}
		quotedPropertyName, ok := propertyNameCache[propertyName]
		if !ok {
			quotedPropertyName = strconv.Quote(propertyName)
			propertyNameCache[propertyName] = quotedPropertyName
		}

		buf = append(buf, quotedPropertyName...)
		buf = append(buf, ":"...)
		{

			buf = strconv.AppendInt(buf, obj.ID, 10)
		}

		i++
	}
	{

		if i != 0 {
			buf = append(buf, ","...)
		}

		propertyName := "Kind"
		if v := ""; v != "" {
			propertyName = strings.SplitN(v, ",", 2)[0]
		}
		quotedPropertyName, ok := propertyNameCache[propertyName]
		if !ok {
			quotedPropertyName = strconv.Quote(propertyName)
			propertyNameCache[propertyName] = quotedPropertyName
		}

		buf = append(buf, quotedPropertyName...)
		buf = append(buf, ":"...)
		{

			buf = strconv.AppendQuote(buf, obj.Kind)
		}

		i++
	}
	{

		if i != 0 {
			buf = append(buf, ","...)
		}

		propertyName := "Name"
		if v := "nickname"; v != "" {
			propertyName = strings.SplitN(v, ",", 2)[0]
		}
		quotedPropertyName, ok := propertyNameCache[propertyName]
		if !ok {
			quotedPropertyName = strconv.Quote(propertyName)
			propertyNameCache[propertyName] = quotedPropertyName
		}

		buf = append(buf, quotedPropertyName...)
		buf = append(buf, ":"...)
		{

			buf = strconv.AppendQuote(buf, obj.Name)
		}

		i++
	}
	{

		if i != 0 {
			buf = append(buf, ","...)
		}

		propertyName := "Age"
		if v := ""; v != "" {
			propertyName = strings.SplitN(v, ",", 2)[0]
		}
		quotedPropertyName, ok := propertyNameCache[propertyName]
		if !ok {
			quotedPropertyName = strconv.Quote(propertyName)
			propertyNameCache[propertyName] = quotedPropertyName
		}

		buf = append(buf, quotedPropertyName...)
		buf = append(buf, ":"...)
		{

			buf = strconv.AppendInt(buf, int64(obj.Age), 10)
		}

		i++
	}
	{
		if obj.CreatedAt.IsZero() {
			goto metagoGoto0

		}

		if i != 0 {
			buf = append(buf, ","...)
		}

		propertyName := "CreatedAt"
		if v := ""; v != "" {
			propertyName = strings.SplitN(v, ",", 2)[0]
		}
		quotedPropertyName, ok := propertyNameCache[propertyName]
		if !ok {
			quotedPropertyName = strconv.Quote(propertyName)
			propertyNameCache[propertyName] = quotedPropertyName
		}

		buf = append(buf, quotedPropertyName...)
		buf = append(buf, ":"...)
		{

			b, err := obj.CreatedAt.MarshalJSON()
			if err != nil {
				return nil, err
			}
			buf = append(buf, b...)
		}

		i++
	}
metagoGoto0:
	;

	buf = append(buf, "}"...)
	ret := make([]byte, len(buf))
	copy(ret, buf)
	bufferPool.Put(buf[:0])

	return ret, nil
}
